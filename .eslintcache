[{"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/reportWebVitals.js":"1","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/App.js":"2","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/index.js":"3","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/MainPage.js":"4","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/ControlPanel.js":"5","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Components/RangeSlider.js":"6","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Components/TagsPicker.js":"7","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Charts/BrushChart.js":"8","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/MyContext.js":"9","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/Map.js":"10","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Charts/BarChart.js":"11"},{"size":362,"mtime":1606227712534,"results":"12","hashOfConfig":"13"},{"size":1423,"mtime":1610363197154,"results":"14","hashOfConfig":"13"},{"size":501,"mtime":1609085146137,"results":"15","hashOfConfig":"13"},{"size":1667,"mtime":1609428889393,"results":"16","hashOfConfig":"13"},{"size":1738,"mtime":1610372828200,"results":"17","hashOfConfig":"13"},{"size":1371,"mtime":1609425378247,"results":"18","hashOfConfig":"13"},{"size":2084,"mtime":1609770382052,"results":"19","hashOfConfig":"13"},{"size":5572,"mtime":1610463412365,"results":"20","hashOfConfig":"13"},{"size":129,"mtime":1609075611876,"results":"21","hashOfConfig":"13"},{"size":4282,"mtime":1610363185328,"results":"22","hashOfConfig":"13"},{"size":2938,"mtime":1610463697226,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"x4v44t",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/reportWebVitals.js",[],["51","52"],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/App.js",[],["53","54"],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/index.js",[],["55","56"],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/MainPage.js",[],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/ControlPanel.js",[],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Components/RangeSlider.js",[],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Components/TagsPicker.js",[],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Charts/BrushChart.js",["57"],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/MyContext.js",[],"/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Pages/Map.js",["58"],"import React, { useRef, useEffect, useContext } from 'react';\nimport * as d3 from 'd3';\nimport MyContext from '../MyContext';\n\nexport default function Map() {\n    const d3Container = useRef(null);\n    let usersContext = useContext(MyContext);\n    let { stationsCodeJson,\n        gjson,\n        countries,\n        setSelected } = usersContext;\n\n    let drawMap = (areas, during) => {\n        let projection = d3.geoMercator()\n            .center([40, 33])                // GPS of location to zoom on\n            .scale(350)                       // This is like the zoom\n            .translate([400, 450])\n        let path = d3.geoPath().projection(projection);\n\n        let mapSVG = d3.select(d3Container.current)\n            .attr('width', 400)\n            .attr('height', 450)\n            .style(\"fill\", \"none\");\n\n        mapSVG.selectAll(\"*\").remove();\n\n        let pathFeature = mapSVG.selectAll(\"path\").data(gjson.features);\n        pathFeature.enter()\n            .append(\"path\")\n            .attr(\"d\", path)\n            .style(\"stroke\", \"white\")\n            .style(\"stroke-width\", \"2\")\n            .attr(\"fill\", '#8dd3c7');\n\n        let tooltipArea = d3.select('div');\n        tooltipArea\n            .append('div')\n            .attr('id', 'tooltip')\n            .style('position', 'absolute')\n            .style('opacity', '0')\n            .style('width', '150px')\n            .style('text-align', 'left')\n            .style('padding', '2px')\n            .style('border-style', 'solid')\n            .style('border-width', 'thin')\n            .style('border-color', 'black')\n            .style('background', '#cab2d6')\n            .style('font-size', '11px');\n\n        let tooltip = d3.select('#tooltip')\n            .style(\n                'transform',\n                'translate(-50%,-100%)')\n            .style(\"color\", \"white\");\n\n        let show = countriesDisplay(stationsCodeJson, areas, during);\n\n        let stationsFeatures = mapSVG.selectAll(\"circle\").data(show);\n        stationsFeatures.enter()\n            .append('circle')\n            .attr(\"class\", \"point\")\n            .attr(\"stroke\", \"black\")\n            .attr(\"cx\", function (d) {\n                return projection([d['Longitude'], d['Latitude']])[0];\n            })\n            .attr(\"cy\", function (d) { return projection([d['Longitude'], d['Latitude']])[1]; })\n            .attr(\"fill\", '#fdb462')\n            .attr(\"r\", 8)\n            .on(\"click\", function (d, value) {\n                setSelected(value);\n            })\n            .on(\"mouseover\", function (event, d) {\n                d3.select(this).attr(\"fill\", '#b15928')\n                tooltip.html(tooltipHtmlEdit(d))\n                    .style(\"top\", (event.pageY + 100) + \"px\")\n                    .style(\"left\", (event.pageX + 100) + \"px\")\n                    .transition().style('opacity', 1);\n            })\n            .on('mouseout', function (event, d) {\n                d3.select(this).attr(\"fill\", '#fdb462')\n                tooltip.style('opacity', 0);\n            })\n\n        // mapSVG.call(d3.zoom()\n        //     .extent([[0, 0], [100, 100]])\n        //     .scaleExtent([1, 8])\n        //     .on(\"zoom\", zoomed));\n\n        // function zoomed({ transform }) {\n        //     mapSVG.attr(\"transform\", transform);\n        // }\n    }\n\n    let tooltipHtmlEdit = (...args) => {\n        let htmlStr = '';\n        for (let i = 0, length = args.length; i < length; i++) {\n            for (var key in args[i]) {\n                htmlStr += key + ': ' + args[i][key] + \"<br/>\";\n            }\n        }\n        return htmlStr;\n    }\n\n    let countriesDisplay = (stations, areas, during) => {\n        let list = [];\n\n        for (let i = 0, ilength = stations.length; i < ilength; i++) {\n            let station = stations[i];\n            for (let j = 0, jlength = areas.length; j < jlength; j++) {\n                let display = areas[j];\n                if (display.Code === station.CountryCode) {\n                    list.push(station);\n                }\n            }\n        }\n        return list;\n    }\n\n    useEffect(() => {\n        drawMap(countries);\n    }, [countries]);\n\n    return (\n        <div>\n            <svg\n                className=\"d3-component\"\n                ref={d3Container}\n            />\n        </div >\n    );\n}","/Users/chenningrui/Homework/4DV806 Advanced Information Visualization and Applications/assignment3/infovis_a3/src/Charts/BarChart.js",["59"],"import React, { useContext, useState, useEffect } from 'react';\nimport MyContext from '../MyContext';\nimport loadable from 'loadable-components';\nconst Plot = loadable(() => import('react-plotly.js'));\n\n\nexport default function BarChart() {\n\n    let usersContext = useContext(MyContext);\n    let { temperatureJson, yearDuring, monthDuring, countries } = usersContext;\n    let [data, setData] = useState([]);\n\n    let dataFilter = (areas, yDuring, mDuring) => {\n        let list = [];\n        let currentStation = '';\n        let tempDic = null;\n        yDuring = yDuring.split(',');\n        mDuring = mDuring.split(',');\n\n        for (let i = 0, ilength = temperatureJson.length; i < ilength; i++) {\n            let item = temperatureJson[i];\n\n            if (checkCondition(item, areas, yDuring, mDuring) === false) {\n                continue;\n            }\n\n            if (currentStation === item.Station) {\n                tempDic.y.push(item.Temperature);\n                tempDic.x.push(item.Year + '-' + item.Month);\n            }\n            else {\n                currentStation = item.Station;\n                tempDic = {\n                    name: currentStation,\n                    y: [item.Temperature],\n                    x: [item.Year + '-' + item.Month],\n                    type: 'bar',\n                }\n                // tempDic.legendgroup = item.Station.slice(0, 2);\n                list.push(tempDic);\n            }\n        }\n\n        setData(list);\n    }\n\n    let checkCondition = (item, areas, yDuring, mDuring) => {\n        for (let i = 0, length = areas.length; i < length; i++) {\n            if (item.Station.indexOf(areas[i].Code) !== -1 &&\n                parseInt(yDuring[0]) <= item.Year &&\n                parseInt(yDuring[1]) >= item.Year &&\n                parseInt(mDuring[0]) <= item.Month &&\n                parseInt(mDuring[1]) >= item.Month) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    let layout = {\n        barmode: 'stack',\n        xaxis: {\n            title: {\n                text: 'Time',\n                font: {\n                    size: 18,\n                    color: '#7f7f7f'\n                }\n            },\n        },\n        yaxis: {\n            title: {\n                text: 'Temperature',\n                font: {\n                    size: 18,\n                    color: '#7f7f7f'\n                }\n            },\n            autorange: true,\n            showgrid: false,\n            zeroline: false,\n            showline: false,\n            autotick: true,\n            ticks: '',\n            showticklabels: false\n        }\n    };\n\n\n    useEffect(() => {\n        dataFilter(countries, yearDuring, monthDuring);\n    }, [countries, yearDuring, monthDuring]);\n\n    return (\n        <div style={{ width: 400, height: 450 }}>\n            <Plot\n                data={data}\n                layout={layout}\n            />\n        </div>\n    );\n\n}",{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"60","replacedBy":"64"},{"ruleId":"62","replacedBy":"65"},{"ruleId":"60","replacedBy":"66"},{"ruleId":"62","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":148,"column":8,"nodeType":"70","endLine":148,"endColumn":43,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":121,"column":8,"nodeType":"70","endLine":121,"endColumn":19,"suggestions":"73"},{"ruleId":"68","severity":1,"message":"74","line":92,"column":8,"nodeType":"70","endLine":92,"endColumn":44,"suggestions":"75"},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],["76"],["77"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'temperatureJson'. Either include it or remove the dependency array.","ArrayExpression",["78"],"React Hook useEffect has a missing dependency: 'drawMap'. Either include it or remove the dependency array.",["79"],"React Hook useEffect has a missing dependency: 'dataFilter'. Either include it or remove the dependency array.",["80"],"no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [selected, yearDuring, monthDuring, temperatureJson]",{"range":"87","text":"88"},"Update the dependencies array to be: [countries, drawMap]",{"range":"89","text":"90"},"Update the dependencies array to be: [countries, yearDuring, monthDuring, dataFilter]",{"range":"91","text":"92"},[3663,3698],"[selected, yearDuring, monthDuring, temperatureJson]",[4109,4120],"[countries, drawMap]",[2718,2754],"[countries, yearDuring, monthDuring, dataFilter]"]